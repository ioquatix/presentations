#!/usr/bin/env ruby

require 'socket'

class Stream
	def initialize(io)
		@io = io
		@read_buffer = String.new.b
	end
	
	def read_into(buffer)
		if fill_read_buffer
			buffer << @read_buffer
			@read_buffer.clear
			
			return true
		end
	end
	
	private
	
	def fill_read_buffer
		while @read_buffer.empty?
			# Increase the chunk size to return more heap data...
			result = @io.read_nonblock(128, @read_buffer, exception: false)
			
			$stderr.puts "@io.read_nonblock -> #{result} @read_buffer=#{@read_buffer.inspect}"
			
			case result
			when :wait_readable
				@io.wait_readable
			when :wait_writable
				@io.wait_writable
			when nil
				return false
			else
				return true
			end
		end
		
		# @read_buffer is not empty:
		return true
	end
end

server = TCPServer.new("localhost", 31337)

while peer = server.accept
	stream = Stream.new(peer)
	
	buffer = String.new.b
	
	while stream.read_into(buffer)
		$stderr.puts "Waiting for more chunks..."
	end
	
	$stderr.puts "Writing response: #{buffer.inspect}"
	
	peer.write(buffer)
	peer.close
end
