#!/usr/bin/env ruby

gem "money"
require 'money/rates_store/memory'

mutex = Mutex.new
store = Money::RatesStore::Memory.new

threads = []

expected_rate = 1.5

1000.times do
	threads << Thread.new do
		while true
			currency1 = ("A".ord..."Z".ord).to_a.sample(3).map(&:chr).join
			currency2 = ("A".ord..."Z".ord).to_a.sample(3).map(&:chr).join
			
			# puts "Adding rate #{currency1} -> #{currency2}"
			store.add_rate(currency1, currency2, expected_rate)
		end
	end
end

threads << Thread.new do
	while true
		store.transaction do
			store.each_rate do |currency1, currency2, rate|
				puts "#{currency1} -> #{currency2} * #{rate.inspect}"
			end
		end
	end
end

threads.each(&:join)
